# SPDX-License-Identifier: Apache-2.0
name: Build Images

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  SERVER_IMAGE_NAME: ${{ github.repository }}/server
  CLIENT_IMAGE_NAME: ${{ github.repository }}/client

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Ruff
        run: pip install ruff

      - name: Run Ruff linting
        continue-on-error: true
        run: |
          ruff check ./server --output-format=github > ruff_report.txt
          cat ruff_report.txt

      - name: Upload Ruff report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ruff-lint-report
          path: ruff_report.txt
          retention-days: 14

  server-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        working-directory: ./server
        run: |
          . .venv/bin/activate
          uv venv
          uv pip install -e ".[dev]"
          uv pip install pytest pytest-asyncio pytest-cov

      - name: Run pytest
        working-directory: ./server
        continue-on-error: true
        run: |
          . .venv/bin/activate
          python -m pytest tests/ -v -m "not integration" --junitxml=test-results.xml > pytest_report.txt 2>&1
          cat pytest_report.txt

      - name: Upload pytest report and logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-report
          path: |
            ./server/pytest_report.txt
            ./server/test-results.xml
            ./server/test_logs.jsonl
          retention-days: 14

  client-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        working-directory: ./client
        run: pnpm install

      - name: Run type check
        working-directory: ./client
        continue-on-error: true
        run: |
          pnpm check > typecheck_report.txt 2>&1
          cat typecheck_report.txt

      - name: Upload type check report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: typecheck-report
          path: ./client/typecheck_report.txt
          retention-days: 14

      - name: Run lint
        working-directory: ./client
        continue-on-error: true
        run: |
          pnpm lint > lint_report.txt 2>&1
          cat lint_report.txt

      - name: Run build
        working-directory: ./client
        env:
          NODE_ENV: production
          DATABASE_URL: postgresql://graphcap:graphcap@localhost:5432/graphcap
          NEXT_PUBLIC_SERVER_HOST: http://localhost:32100/api/v1
        run: |
          # Create an empty .env file if it doesn't exist
          touch .env
          # Run build and capture all output including stderr
          pnpm build 2>&1 | tee build_report.txt || true
          # Check if build actually succeeded
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "Build failed - check build_report.txt for details"
            exit 1
          fi

      - name: Upload build report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-report
          path: ./client/build_report.txt
          retention-days: 14

      - name: Run unit tests
        working-directory: ./client
        run: |
          pnpm test:unit > test_report.txt 2>&1
          cat test_report.txt

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: ./client/test_report.txt
          retention-days: 14

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Server Docker metadata
        id: meta-server
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.SERVER_IMAGE_NAME }}

      - name: Extract Client Docker metadata
        id: meta-client
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.CLIENT_IMAGE_NAME }}

      - name: Build Server Docker image
        id: build-server
        uses: docker/build-push-action@v6
        with:
          context: ./server
          file: ./server/Dockerfile.server
          push: false
          tags: ${{ steps.meta-server.outputs.tags }}
          labels: ${{ steps.meta-server.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Client Docker image
        id: build-client
        uses: docker/build-push-action@v6
        with:
          context: ./client
          file: ./client/Dockerfile.client
          push: false
          tags: ${{ steps.meta-client.outputs.tags }}
          labels: ${{ steps.meta-client.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
